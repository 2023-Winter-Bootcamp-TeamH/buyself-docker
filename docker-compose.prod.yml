version: "3"
services:
  backend:
    build:
      context: ./buyself-backend
      dockerfile: Dockerfile
    env_file: ./settings/.env
    volumes:
      - ./buyself-backend/:/buyself-backend/
    environment:
      FLASK_ENV: development
      FLASK_DEBUG: 1
    command: gunicorn -w 1 -b 0:8000 wsgi:app
    networks:
      - app-tier

  frontend:
    build:
      context: ./buyself-frontend
    command: ["npm", "start"]
    environment:
      - REACT_APP_BACKEND_URL=http://localhost
    volumes:
      - ./buyself-frontend/:/buyself-frontend
      - build_folder:/buyself-frontend/build
      - ./buyself-frontend/node_modules/:/buyself-frontend/node_modules
    networks:
      - app-tier

  rabbitmq:
    hostname: rabbit
    image: rabbitmq:3-management
    command: rabbitmq-server
    restart: unless-stopped
    environment:
      - RABBITMQ_DEFAULT_USER=buyselfback
      - RABBITMQ_DEFAULT_PASS=buyselfback
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - app-tier
    depends_on:
      - backend

  celery:
    build:
      context: ./buyself-backend
      dockerfile: Dockerfile
    restart: unless-stopped
    depends_on:
      - "rabbitmq"
      - "backend"
    networks:
      - app-tier
    command:
      [
        "celery",
        "-A",
        "tasks",
        "worker",
        "--loglevel=info",
        "--pool",
        "threads"
      ]

  redis:
    image: redis:alpine
    command: redis-server --port 6379
    ports:
      - 6379:6379
    networks:
      - app-tier


  prometheus:
    image: prom/prometheus:latest
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/:/etc/prometheus/
      - ./prometheus/data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    links:
      - cadvisor:cadvisor
      - alertmanager:alertmanager
    depends_on:
      - backend
      - cadvisor
    networks:
      - app-tier
    expose:
      - 9090

  alertmanager:
    image: prom/alertmanager
    ports:
      - 9093:9093
    volumes:
      - ./alertmanager/:/etc/alertmanager/
    networks:
      - app-tier
    restart: always
    command:
      - "--config.file=/etc/alertmanager/config.yml"
      - "--storage.path=/alertmanager"

  grafana:
    image: grafana/grafana:latest
    ports:
      - 3333:3000
    volumes:
      - ./datasource.yml:/etc/grafana/provisioning/datasource.yml
    depends_on:
      - prometheus
    networks:
      - app-tier

  node-exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.sysfs=/host/sys"
      - --collector.filesystem.ignored-mount-points
      - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
    ports:
      - 9100:9100
    restart: always
    networks:
      - app-tier

  nginx:
    container_name: nginx
    build:
      context: ./nginx
      dockerfile: Dockerfile
    ports:
      - 80:8080
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/nginx.conf
      - build_folder:/var/www/buyself-frontend
      - ./nginx/log:/var/log/nginx
    networks:
      - app-tier
    depends_on:
      - backend
      - frontend
    restart: always

  cadvisor:
    image: zcube/cadvisor
    container_name: cadvisor
    ports:
      - 8080:8080
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
    networks:
      - app-tier

  elasticsearch:
    build:
      context: ./ELK/elasticsearch
      args:
        ELASTIC_VERSION: 7.17.8
    volumes:
      - ./ELK/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      ELASTIC_PASSWORD: buyself
      discovery.type: single-node
    restart: unless-stopped
    networks:
      - app-tier

  logstash:
      build:
        context: ./ELK/logstash
        args:
          ELASTIC_VERSION: 7.17.8
      volumes:
        - ./ELK/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
        - ./ELK/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
      ports:
        - 5044:5044
        - 50000:50000/tcp
        - 50000:50000/udp
        - 9600:9600
      environment:
        LS_JAVA_OPTS: -Xms256m -Xmx256m
        LOGSTASH_INTERNAL_PASSWORD: buyself
      depends_on:
        - elasticsearch
      restart: unless-stopped
      networks:
        - app-tier

  kibana:
      build:
        context: ./ELK/kibana
        args:
          ELASTIC_VERSION: 7.17.8
      volumes:
        - ./ELK/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
      ports:
        - 5601:5601
      environment:
        KIBANA_SYSTEM_PASSWORD: buyself
      depends_on:
        - elasticsearch
      restart: unless-stopped
      networks:
        - app-tier

  filebeat:
      build:
        context: ./ELK/filebeat
        args:
          ELASTIC_VERSION: 7.17.8
      entrypoint: "filebeat -e -strict.perms=false"
      volumes:
        - ./ELK/filebeat/config/filebeat.yml:/usr/share/filebeat/filebeat.yml
        - ./nginx/log:/var/log/nginx
      depends_on:
        - logstash
        - elasticsearch
        - kibana
      networks:
        - app-tier

networks:
  app-tier:
    driver: bridge

volumes:
  build_folder: null